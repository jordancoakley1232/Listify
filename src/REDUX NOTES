Redux is a state management framework that can be used witha number of different technologies. 
In redux there is a single state object thats responsoble for the entire state of the application. The redux store is the single source of trusth when it comes to application state. This also means that any time any piece of your app wants to update state, it must do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app. 

The Redux store is an object which hold and manages application state. There si a method called createStore() on the Redux object, which you use to create the Redux Store. This methoda takes a reducer fucntion as a required argument.

CREATE A STORE
const store = Redux.createStore(reducer);

HOW TO GET STATE from the Redux Store;
The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current state in the Redux store object with the getState() method.
// const currentState = store.getState();

DEFINE A REDUX ACTION
Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a javascript object that contains information about an action event that has occured. The Redux store receves these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a "type" property that specifies the 'type' of action that occured.

Think of Redux actions as messengers that deliver information about events happening in yur app to the Redux store. The store then conducts the business of updating state based on the action that occured.
//const action = {
    type: 'LOGIN'
}

DEFINE AN ACTION CREATOR
After creating an actioni, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish thos. An action creator is simply a Javascript function that returns an action. In other words, action creators create objects that represent action events. 
const action = {
    type: 'LOGIN'
}
const actionCreator = () => {
    return action
}

DISPATCH AN ACTION EVENT
dispatch method is what you us eot dispatch events to the Redux store. Calling store.dispatch() and passing the value returned from an action creator sends an action to the store. 
Rememeber that acion creators return an object with a type property that specifies the action that has occured. Then the method dispatches an action object to the Redux store. Based on that logic, both of these are the same.
store.dispatch(actionCreator());
store.dispatch({type: 'LOGIN'});

const store = Redux.createStore(
  (state = {login: false}) => state
);

const loginAction = () => {
  return {
    type: 'LOGIN'
  }
};

// Dispatch action
store.dispatch(loginAction());

HANDLE AN ACTION IN THE STORE
After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a reducer function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A reducer takes state and action as arguments, and it always returns a new state. It is important to see that this is the only role of the reducer. It has no side effects â€” it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.

Another key principle in Redux is that state is read-only. In other words, the reducer function must always return a new copy of state and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You'll practice this in later challenges.

const defaultState = {
    login: false,
}

const reducer = (state = defaultState, action) => {
    if (action.type === 'LOGIN) {
        return {login: true}
    } else {
        return state
    }
}

USE A SWTICH STATEMENT TO HANDLE MULTIPLE ACTIONS
You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property authenticated. You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves.

 const defaultState = {
     authenticated: false,
 }

 const authReducer = (state = defaultState, action) => {
     switch (action.type) {
         case 'LOGIN':
         return {authenticated: true}
         break;
         case 'LOGOUT':
         return {authenticated: false}
         break;
         default:
         return state
     }
 }

 USE CONST FOR ACTION TYPES
A common practice when working with Redux is to assign action types as read one constants, then reference theses constants wherever they are used.

const LOGIN = "LOGIN";
const LOGOUT = "LOGOUT";

REGISTER A STORE LISTENER
Another method you have access to on the REdux store object is store.subscribe(). This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe  a fucntion to your store that simply logs a message everytime an action is received and the store is updated. 

let count = 0;
const incrementCount = () => {
    count++
}
store.subscribe(incrementCount);

COMBINE MULTIPLE REDUCERS
When the state of your app begins to grow more complex, it my be tempting to divide state into multiple pieces. Instead, rememeber the first principle of Redux: all app state is held in a single state object in the store. Therefore, REdux privides reducer composition as a solution for a complex state model. You define reducers to handle difference pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux createStore() method. 

In order to let us combine multiple reducers together, Redux provides the combineReducers() method. This method accepts an object as an argument in which you define properties whwich associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state. 

Typically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authenitcation while another handles the text and notes that the user s submitting. For such an application, we might write the combineReducers() method like this:
const rootReducer = Redux.combineReducers({
    auth: authReducer,
    notes: noteReducer
});

Now, the key notes will contain all of the state associated with our notes and handle by our notesReducer. This is how multiple reducers can be composed to manage more complex application state. In this example the state held in the Redux store would then be a single object containing auth and notes properties. 

SEND ACITON DATA TO THE STORE
You can also send specific data along with your actions. This is very commonn because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about the data.

// const ADD_NOTE = 'ADD_NOTE';
const notesReducer = (state = 'Initial State', action) => {
    switch(action.type) {
        case ADD_NOTE:
        return action.text;
        default: 
        return state;
    }
}

const addNoteText = (note) => {
    return {type: ADD_NOTE, text: note}
}

const store = Redux.createStore(notesReducer);
store.dispatch(addNoteText('Hello));

USE MIDDLEWARE TO HANDLE ASYNCHRONOUS ACTIONS
So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here's a brief description how to use this with Redux.

To include Redux Thunk middleware, you pass it as an argument to Redux.applyMiddleware(). This statement is then provided as a second optional parameter to the createStore() function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes dispatch as an argument. Within this function, you can dispatch actions and perform asynchronous requests.

In this example, an asynchronous request is simulated with a setTimeout() call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed.

Remember that you're passing dispatch as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest.

//const REQUESTING_DATA = 'REQUESTING_DATA'
const RECEIVED_DATA = 'RECEIVED_DATA'

const requestingData = () => { return {type: REQUESTING_DATA} }
const receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }

const handleAsync = () => {
  return function(dispatch) {
    // Dispatch request action here
dispatch(requestingData())
    setTimeout(function() {
      let data = {
        users: ['Jeff', 'William', 'Alice']
      }
      // Dispatch received data action here
dispatch(receivedData(data))
    }, 2500);
  }
  
};

const defaultState = {
  fetching: false,
  users: []
};

const asyncDataReducer = (state = defaultState, action) => {
  switch(action.type) {
    case REQUESTING_DATA:
      return {
        fetching: true,
        users: []
      }
    case RECEIVED_DATA:
      return {
        fetching: false,
        users: action.users
      }
    default:
      return state;
  }
};

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);

NEVER MUTATE STATE
Immutable means that you never modify stae directly, insead, you return a new copy of state.
If you took a snapshot of the state of a Redux app over time, you would see something like state 1, state 2, state 3,state 4, ... and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.

Redux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a string, number, array, or object. Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An array or object, however, is mutable. In practice, your state will probably consist of an array or object, as these are useful data structures for representing many types of information.

// const ADD_TODO = 'ADD_TODO';

action creator
const addTodo = (todo) => {
    return {
        type: ADD_TODO,
        todo
    }
}
const todos= [
  'Go to the store',
  'Clean the house',
  'Cook dinner',
  'Learn to code',
];

Reducer that returns new state after todo is added.
const immutableReducer = (state = todos, action) => {
    switch (action.type) {
        case ADD_TODO:
        return [...todos, action.todo];
        default:
        return state
    }
}

REMOVE AN ITEM FROM AN ARRAY
The spread operator can be used here as well. Other useful Javasctip methods include slice() and concat();

const immutableReducer = (state = [0,1,2,3,4,5], action) => {
    switch (action.type) {
        case "REMOVE_ITEM":
        return [...state.slice(0, action.index), ...state.slice(action.index + 1, state.length)]
    };
    default: 
    return state;
};

COPY AN OBJECT WITH OBJECT.ASSIGN
The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an object, too. A useful tool for handling objects is the Object.assign() utility. Object.assign() takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy.

const newObject = Object.assign({}, obj1, obj2);

This creates newObject as a new object, which contains the properties that currently exist in obj1 and obj2.

const defaultState = {
  user: 'CamperBot',
  status: 'offline',
  friends: '732,982',
  community: 'freeCodeCamp'
};

const immutableReducer = (state = defaultState, action) => {
    switch(action.type) {
        case "ONLINE":
        return Object.assign({}, ...state, {status: "online});
        default:
        return state;
    }
}


REACT AND REDUX
The Provider component allows you to provide state and dispatch to your React components, but you must specify exact;y whats tte and actions you want. This way you make sure that each component only has access to the state it needs.
You accomplish this by creating two functions: mapStateToProps() and mapDispatchToProps().

In these functions, you declare what pieces of state you want to have access to and which action creators you need to be able to dispatch.

Behind the scenes, ReactRedux uses store.subscribe method to implement mapStateToProps();

const mapStateToProps = (state) => {
    return {
        messages: state;
    }
}

MAP DISPATCH TO PROPS
The mapDispatchToProps function is sued ot provide specific action creators to your react components so they can dispatch actions against the Redux store. Its similar in structure to the mapStateToProps() function.It returns an object that maps dispatch actions to property names, which become component props. However, instead of returning a piece of state, each property returns a function that calls dispatch with an acion creator and any relevant action data. You have access to this dispatch because its passed in to mapDispatchToProps() as a parameter when you define the function, just like you passed state to mapStateToProps(). Behind the scenes, ReactRedux is using Redux's store.dispatch() to conduct these dispatches with mapDispatchToProps() This sis similar to how it uses store.subscribe() for components that are mapped to state. 
const addMessage = (message) => {
    return {
        type: 'ADD',
        message: message,
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        submitNewMessage: function(message) {
            dispatch(addMessage(message))
        }
    }
}